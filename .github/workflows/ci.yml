# Continuous Integration
# This workflow downloads Slack over different environments 
# and perform test runs of the install script

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: "0 0 * * *"

jobs:

  # Job that downloads slack for all platforms and upload as artifacts
  download-slack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install Dependencies
      run: |
        pip install git+https://github.com/alirezamika/autoscraper.git
    - name: Find Latest Slack URL and Versions
      run: |
        python .github/workflows/download_slack.py --do_download linux
        python .github/workflows/download_slack.py --do_download macos
        python .github/workflows/download_slack.py --do_download windows
    - name: Upload Slack Linux
      uses: actions/upload-artifact@v2
      with:
        name: slack--linux-latest
        path: linux
    - name: Upload Slack MacOS
      uses: actions/upload-artifact@v2
      with:
        name: slack--macos-latest
        path: macos
    - name: Upload Slack Windows
      uses: actions/upload-artifact@v2
      with:
        name: slack--windows-latest
        path: windows

  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [2.7, 3.6, 3.7, 3.8, pypy2, pypy3]
        include:
          - os: macOS-latest
            python-version: 2.7
          - os: macOS-latest
            python-version: 3.6
          - os: windows-latest
            python-version: 2.7
          - os: windows-latest
            python-version: 3.6

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
    - name: Download Slack (from common artifact)
      uses: actions/download-artifact@v2
      with:
        name: slack--${{ matrix.os }}
        path: slack
    - name: Get Slack Version
      run: |
        version=`cat slack/version.txt`
        echo "::env name=SLACK_VERSION::${version}"
      shell: bash
    - name: Install Slack (Ubuntu)
      run: |
        sudo apt-get install alien
        sudo alien -i -k slack/slack.rpm
      if: matrix.os == 'ubuntu-latest'
    - name: Install Slack (MacOS)
      run: |
        hdiutil attach slack/slack.dmg
        sudo cp -rf /Volumes/Slack.app/Slack.app /Applications
      if: matrix.os == 'macOS-latest'
    - name: Install Slack (Windows)
      run: |
        .\slack\slack.exe
        while (!(Test-Path "$env:userprofile\Desktop\Slack.lnk")) { Start-Sleep 10 }
      if: matrix.os == 'windows-latest'
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test run the script (Ubuntu and MacOS)
      run: |
        sudo python math-with-slack.py
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
    - name: Test run the script (Windows)
      run: |
        python math-with-slack.py
      shell: bash
      if: matrix.os == 'windows-latest'
    - name: Create Success Badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.BADGE_GIST_ID }}
        filename: ${{ matrix.os }}-${{ matrix.python-version }}.json
        label: OS ${{ matrix.os }} | Python ${{ matrix.python-version }} | Slack ${{ env.SLACK_VERSION }}
        message: passing
        color: green
      if: ${{ success() && github.event_name != 'pull_request' }}
    - name: Create Unknown Badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.BADGE_GIST_ID }}
        filename: ${{ matrix.os }}-${{ matrix.python-version }}.json
        label: OS ${{ matrix.os }} | Python ${{ matrix.python-version }} | Slack ${{ env.SLACK_VERSION }}
        message: unknown
        color: lightgrey
      if: ${{ cancelled() && github.event_name != 'pull_request' }}
    - name: Create Failure Badge
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.BADGE_GIST_ID }}
        filename: ${{ matrix.os }}-${{ matrix.python-version }}.json
        label: OS ${{ matrix.os }} | Python ${{ matrix.python-version }} | Slack ${{ env.SLACK_VERSION }}
        message: failed
        isError: true
      if: ${{ failure() && github.event_name != 'pull_request' }}
